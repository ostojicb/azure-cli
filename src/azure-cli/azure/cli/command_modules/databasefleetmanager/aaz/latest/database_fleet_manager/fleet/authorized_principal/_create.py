# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "database-fleet-manager fleet authorized-principal create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create an authorized principal.
    """

    _aaz_info = {
        "version": "2023-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.databasefleetmanager/fleets/{}/authorizedprincipals/{}", "2023-08-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.authorized_principal_name = AAZStrArg(
            options=["-n", "--name", "--authorized-principal-name"],
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!.*--)[a-z0-9]+(?:-[a-z0-9]+)*$",
            ),
        )
        _args_schema.fleet_name = AAZStrArg(
            options=["--fleet-name"],
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!.*--)[a-z0-9]+(?:-[a-z0-9]+)*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.application_id = AAZStrArg(
            options=["--application-id"],
            arg_group="Properties",
            help="Application Id of the authorized principal.",
        )
        _args_schema.object_id = AAZStrArg(
            options=["--object-id"],
            arg_group="Properties",
            help="Object Id of the authorized principal.",
        )
        _args_schema.principal_type = AAZStrArg(
            options=["--principal-type"],
            arg_group="Properties",
            help="Principal type of the authorized principal.",
            enum={"Application": "Application"},
        )
        _args_schema.role = AAZStrArg(
            options=["--role"],
            arg_group="Properties",
            help="Role assigned to the authorized principal.",
        )
        _args_schema.sql_user_type = AAZStrArg(
            options=["--sql-user-type"],
            arg_group="Properties",
            help="SQL user type of the authorized principal. Extra: Database user, Sever: Server user, Default: Server admin",
            enum={"Default": "Default", "Extra": "Extra", "Server": "Server"},
        )
        _args_schema.tenant_id = AAZStrArg(
            options=["--tenant-id"],
            arg_group="Properties",
            help="Tenant Id of the authorized principal.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.AuthorizedPrincipalsPut(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AuthorizedPrincipalsPut(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/authorizedPrincipals/{authorizedPrincipalName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "authorizedPrincipalName", self.ctx.args.authorized_principal_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "fleetName", self.ctx.args.fleet_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("applicationId", AAZStrType, ".application_id")
                properties.set_prop("objectId", AAZStrType, ".object_id")
                properties.set_prop("principalType", AAZStrType, ".principal_type")
                properties.set_prop("role", AAZStrType, ".role")
                properties.set_prop("sqlUserType", AAZStrType, ".sql_user_type")
                properties.set_prop("tenantId", AAZStrType, ".tenant_id")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.application_id = AAZStrType(
                serialized_name="applicationId",
            )
            properties.object_id = AAZStrType(
                serialized_name="objectId",
            )
            properties.principal_type = AAZStrType(
                serialized_name="principalType",
            )
            properties.role = AAZStrType()
            properties.sql_user_type = AAZStrType(
                serialized_name="sqlUserType",
            )
            properties.tenant_id = AAZStrType(
                serialized_name="tenantId",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
