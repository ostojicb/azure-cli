# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "database-fleet-manager fleet fleetspace migrate-server",
    is_preview=True,
)
class MigrateServer(AAZCommand):
    """Migrates existing logical server into fleet.
    """

    _aaz_info = {
        "version": "2023-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.databasefleetmanager/fleets/{}/fleetspaces/{}/migrateserver", "2023-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fleet_name = AAZStrArg(
            options=["--fleet-name"],
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^(?!.*--)[a-z0-9]+(?:-[a-z0-9]+)*$",
            ),
        )
        _args_schema.fleetspace_name = AAZStrArg(
            options=["--fleetspace-name"],
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^(?!.*--)[a-z0-9]+(?:-[a-z0-9]+)*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.destination_tier_overrides = AAZDictArg(
            options=["--destination-tier-overrides"],
            arg_group="Parameters",
        )
        _args_schema.source_resource_group_name = AAZStrArg(
            options=["--source-resource-group-name"],
            arg_group="Parameters",
        )
        _args_schema.source_server_name = AAZStrArg(
            options=["--source-server-name"],
            arg_group="Parameters",
        )
        _args_schema.source_subscription_id = AAZStrArg(
            options=["--source-subscription-id"],
            arg_group="Parameters",
        )
        _args_schema.tier_name = AAZStrArg(
            options=["--tier-name"],
            arg_group="Parameters",
        )

        destination_tier_overrides = cls._args_schema.destination_tier_overrides
        destination_tier_overrides.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.MigrationsServer(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class MigrationsServer(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    None,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/fleetspaces/{fleetspaceName}/migrateServer",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fleetName", self.ctx.args.fleet_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "fleetspaceName", self.ctx.args.fleetspace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("destinationTierOverrides", AAZDictType, ".destination_tier_overrides")
            _builder.set_prop("sourceResourceGroupName", AAZStrType, ".source_resource_group_name")
            _builder.set_prop("sourceServerName", AAZStrType, ".source_server_name")
            _builder.set_prop("sourceSubscriptionId", AAZStrType, ".source_subscription_id")
            _builder.set_prop("tierName", AAZStrType, ".tier_name")

            destination_tier_overrides = _builder.get(".destinationTierOverrides")
            if destination_tier_overrides is not None:
                destination_tier_overrides.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)


class _MigrateServerHelper:
    """Helper class for MigrateServer"""


__all__ = ["MigrateServer"]
