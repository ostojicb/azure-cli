# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "database-fleet-manager fleet tier create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a tier.
    """

    _aaz_info = {
        "version": "2023-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.databasefleetmanager/fleets/{}/tiers/{}", "2023-08-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fleet_name = AAZStrArg(
            options=["--fleet-name"],
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!.*--)[a-z0-9]+(?:-[a-z0-9]+)*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.tier_name = AAZStrArg(
            options=["-n", "--name", "--tier-name"],
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!.*--)[a-z0-9]+(?:-[a-z0-9]+)*$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.capacity = AAZIntArg(
            options=["--capacity"],
            arg_group="Properties",
            help="Capacity of provisioned resources in the tier, in units matching the specified service tier, for example vCore for GeneralPurpose.",
        )
        _args_schema.database_capacity_max = AAZFloatArg(
            options=["--database-capacity-max"],
            arg_group="Properties",
            help="Maximum allocated capacity per database, in units matching the specified service tier.",
        )
        _args_schema.database_capacity_min = AAZFloatArg(
            options=["--database-capacity-min"],
            arg_group="Properties",
            help="Minimum allocated capacity per database, in units matching the specified service tier.",
        )
        _args_schema.database_size_gb_max = AAZIntArg(
            options=["--database-size-gb-max"],
            arg_group="Properties",
            help="Maximum database size in Gb.",
        )
        _args_schema.family = AAZStrArg(
            options=["--family"],
            arg_group="Properties",
            help="Family of provisioned resources, for example Gen5.",
        )
        _args_schema.num_of_empty_preprovisioned_databases = AAZIntArg(
            options=["--num-of-empty-preprovisioned-databases"],
            arg_group="Properties",
            help="Number of empty preprovisioned databases for fast database provisioning.",
        )
        _args_schema.pool_num_of_databases_max = AAZIntArg(
            options=["--pool-num-of-databases-max"],
            arg_group="Properties",
            help="Maximum number of databases per pool.",
        )
        _args_schema.pooled = AAZBoolArg(
            options=["--pooled"],
            arg_group="Properties",
            help="If true, databases are pooled.",
        )
        _args_schema.serverless = AAZBoolArg(
            options=["--serverless"],
            arg_group="Properties",
            help="If true, serverless resources are provisioned in the tier.",
        )
        _args_schema.service_tier = AAZStrArg(
            options=["--service-tier"],
            arg_group="Properties",
            help="Service tier of provisioned resources, for example GeneralPurpose.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.FleetTiersPut(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class FleetTiersPut(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseFleetManager/fleets/{fleetName}/tiers/{tierName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fleetName", self.ctx.args.fleet_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "tierName", self.ctx.args.tier_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("capacity", AAZIntType, ".capacity")
                properties.set_prop("databaseCapacityMax", AAZFloatType, ".database_capacity_max")
                properties.set_prop("databaseCapacityMin", AAZFloatType, ".database_capacity_min")
                properties.set_prop("databaseSizeGbMax", AAZIntType, ".database_size_gb_max")
                properties.set_prop("family", AAZStrType, ".family")
                properties.set_prop("numOfEmptyPreprovisionedDatabases", AAZIntType, ".num_of_empty_preprovisioned_databases")
                properties.set_prop("poolNumOfDatabasesMax", AAZIntType, ".pool_num_of_databases_max")
                properties.set_prop("pooled", AAZBoolType, ".pooled")
                properties.set_prop("serverless", AAZBoolType, ".serverless")
                properties.set_prop("serviceTier", AAZStrType, ".service_tier")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.capacity = AAZIntType()
            properties.database_capacity_max = AAZFloatType(
                serialized_name="databaseCapacityMax",
            )
            properties.database_capacity_min = AAZFloatType(
                serialized_name="databaseCapacityMin",
            )
            properties.database_size_gb_max = AAZIntType(
                serialized_name="databaseSizeGbMax",
            )
            properties.disabled = AAZBoolType(
                flags={"read_only": True},
            )
            properties.family = AAZStrType()
            properties.num_of_empty_preprovisioned_databases = AAZIntType(
                serialized_name="numOfEmptyPreprovisionedDatabases",
            )
            properties.pool_num_of_databases_max = AAZIntType(
                serialized_name="poolNumOfDatabasesMax",
            )
            properties.pooled = AAZBoolType()
            properties.serverless = AAZBoolType()
            properties.service_tier = AAZStrType(
                serialized_name="serviceTier",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
